/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    tapping_term_ms = <150>;
    flavor = "tap-preferred";
};

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_copy {
            timeout-ms = <30>;
            key-positions = <20 22>;
            bindings = <&mt LCTRL c>;
        };
        combo_cut {
            timeout-ms = <30>;
            key-positions = <20 21>;
            bindings = <&mt LCTRL x>;
        };
        combo_paste {
            timeout-ms = <30>;
            key-positions = <21 22>;
            bindings = <&mt LCTRL v>;
        };
        combo_tab {
            timeout-ms = <30>;
            key-positions = <1 3>;
            bindings = <&kp TAB>;
        };
        combo_esc {
            timeout-ms = <30>;
            key-positions = <1 2 3>;
            bindings = <&kp ESC>;
        };
        combo_equals {
            timeout-ms = <30>;
            key-positions = <7 8>;
            bindings = <&kp EQUAL>;
        };
        combo_underscore {
            timeout-ms = <30>;
            key-positions = <26 27>;
            bindings = <&kp UNDERSCORE>;
        };
        combo_double_quotes {
            timeout-ms = <30>;
            key-positions = <1 2>;
            bindings = <&kp DOUBLE_QUOTES>;
        };
        combo_single_quote {
            timeout-ms = <30>;
            key-positions = <2 3>;
            bindings = <&kp SINGLE_QUOTE>;
        };
        combo_backtick {
            timeout-ms = <30>;
            key-positions = <22 23>;
            bindings = <&kp GRAVE>;
        };
        combo_excl {
            timeout-ms = <30>;
            key-positions = <27 28>;
            bindings = <&kp EXCLAMATION>;
        };
        combo_pipe {
            timeout-ms = <30>;
            key-positions = <26 27 28>;
            bindings = <&kp PIPE2>;
        };
        combo_backslash {
            timeout-ms = <30>;
            key-positions = <28 29>;
            bindings = <&kp BACKSLASH>;
        };
        combo_delete {
            timeout-ms = <30>;
            key-positions = <12 13>;
            bindings = <&kp DELETE>;
        };
        combo_enter {
            timeout-ms = <30>;
            key-positions = <16 17>;
            bindings = <&kp ENTER>;
        };
        combo_capslock {
            timeout-ms = <30>;
            key-positions = <6 7 8>;
            bindings = <&caps_word>;
        };
    };

    /*
    // Numbers:
    //  0  1  2  3  4   |    5  6  7  8  9
    // 10 11 12 13 14   |   15 16 17 18 19
    // 20 21 22 23 24   |   25 26 27 28 29
    //          30 31   |   32 33
    */

    keymap {
        compatible = "zmk,keymap";

        L_QWERTY {
            bindings = <
            &kp Q       &kp W       &kp E         &kp R       &kp T             &kp Y &kp U       &kp I       &kp O       &kp P
            &hm LALT A  &hm LGUI S  &hm LSHIFT D  &hm LCTRL F &kp G             &kp H &hm RCTRL J &hm RSFT K  &hm RGUI L  &hm LALT SEMICOLON
            &kp Z       &kp X       &kp C         &hm RALT V  &kp B             &kp N &hm RALT M  &kp CMMA    &kp DOT     &kp SLASH
                                    &mo L_FKEYS   &lt L_NUMSYM SPC              &lt L_NAV BSPC    &mo L_BLE
            >;
        };

        L_NUMSYM {
            bindings = <
            &kp N1    &kp N2    &kp N3    &kp N4    &kp N5                      &kp N6    &kp N7    &kp N8    &kp N9    &kp N0
            &kp LPAR  &kp LBKT  &kp RBKT  &kp RPAR  &none                       &kb MINUS &kp N4    &kp N5    &kp N6    &kp PLUS
            &kp LBRC  &kp LT    &kp GT    &kp RBRC  &none                       &kp DOT   &kp N1    &kp N2    &kp N3    &kp SLASH
                                              &none &none                       &kp N0    &none
            >;
        };

        L_NAV {
            bindings = <
            &kp EXCL  &kp AT  &kp HASH  &kp DOLLAR  &kp PRCNT       &kp CARET   &kp AMPS    &kp ASTRK   &none       &none
            &none     &none   &none     &none       &none           &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &none
            &none     &none   &none     &none       &none           &kp HOME    &kp PH_DN   &kp PN_UP   &kp END     &none
                                        &none       &none           &none       &none
            >;
        };

        L_FKEYS {
            bindings = <
            &none   &none   &none   &none   &none                    &none &kp F7   &kp F8  &kp F9  &kp F12
            &none   &none   &none   &none   &none                    &none &kp F4   &kp F5  &kp F8  &kp F11
            &none   &none   &none   &none   &none                    &none &kp F1   &kp F2  &kp F3  &kp F10
                                    &none   &none                    &none          &none
            >;
        };

        L_BLE {
            bindings = <
            &none           &none           &none           &none           &bt BT_CLR      &none   &none   &none   &none   &none
            &bt BT_SEL 4    &bt BT_SEL 3    &bt BT_SEL 2    &bt BT_SEL 1    &bt BT_SEL 0    &none   &none   &none   &none   &none
            &none           &none           &none           &out OUT_USB    &none           &none   &none   &none   &none   &none
                                                            &none           &none           &none   &none
            >;
        };

    };
};
